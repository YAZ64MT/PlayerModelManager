#ifndef __PLAYERMODELMANAGER_API__
#define __PLAYERMODELMANAGER_API__

#include "global.h"
#include "modding.h"

typedef unsigned long ZPlayerModelManagerHandle;

// Used for keeping compatibility between versions
// DO NOT EDIT
#define ZPMM_API_VERSION 1UL

#define YAZMT_Z64_PLAYER_MODEL_MANAGER_MOD_NAME "yazmt_mm_playermodelmanager"

typedef enum {
    ZPMM_DL_WAIST,
    ZPMM_DL_RTHIGH,
    ZPMM_DL_RSHIN,
    ZPMM_DL_RFOOT,
    ZPMM_DL_LTHIGH,
    ZPMM_DL_LSHIN,
    ZPMM_DL_LFOOT,
    ZPMM_DL_HEAD,
    ZPMM_DL_HAT,
    ZPMM_DL_COLLAR,
    ZPMM_DL_LSHOULDER,
    ZPMM_DL_LFOREARM,
    ZPMM_DL_LHAND,
    ZPMM_DL_RSHOULDER,
    ZPMM_DL_RFOREARM,
    ZPMM_DL_RHAND,
    ZPMM_DL_SHEATH_NONE,
    ZPMM_DL_TORSO,
    ZPMM_DL_LFIST,
    ZPMM_DL_LHAND_BOTTLE,
    ZPMM_DL_RFIST,
    ZPMM_DL_SWORD1_SHEATH,
    ZPMM_DL_SWORD2_SHEATH,
    ZPMM_DL_SWORD3_SHEATH,
    ZPMM_DL_SWORD4_SHEATH,
    ZPMM_DL_SWORD1_HILT,
    ZPMM_DL_SWORD2_HILT,
    ZPMM_DL_SWORD3_HILT,
    ZPMM_DL_SWORD4_HILT,
    ZPMM_DL_SWORD1_BLADE,
    ZPMM_DL_SWORD2_BLADE,
    ZPMM_DL_SWORD3_BLADE,
    ZPMM_DL_SWORD4_BLADE,
    ZPMM_DL_SWORD4_BLADE_BROKEN,
    ZPMM_DL_SWORD4_BLADE_FRAGMENT,
    ZPMM_DL_SHIELD1,
    ZPMM_DL_SHIELD2,
    ZPMM_DL_SHIELD3,
    ZPMM_DL_SHIELD3_RAY,
    ZPMM_DL_BOTTLE_GLASS,
    ZPMM_DL_BOTTLE_CONTENTS,
    ZPMM_DL_OCARINA_FAIRY,
    ZPMM_DL_OCARINA_TIME,
    ZPMM_DL_DEKU_STICK,
    ZPMM_DL_BOW,
    ZPMM_DL_BOW_STRING,
    ZPMM_DL_BOW_ARROW,
    ZPMM_DL_SLINGSHOT,
    ZPMM_DL_SLINGSHOT_STRING,
    ZPMM_DL_HOOKSHOT,
    ZPMM_DL_HOOKSHOT_CHAIN,
    ZPMM_DL_HOOKSHOT_HOOK,
    ZPMM_DL_HOOKSHOT_RETICLE,
    ZPMM_DL_FPS_HOOKSHOT,
    ZPMM_DL_FPS_LFOREARM,
    ZPMM_DL_FPS_LHAND,
    ZPMM_DL_FPS_RFOREARM,
    ZPMM_DL_FPS_RHAND,
    ZPMM_DL_MASK_SKULL,
    ZPMM_DL_MASK_SPOOKY,
    ZPMM_DL_MASK_GERUDO,
    ZPMM_DL_MASK_TRUTH,
    ZPMM_DL_MASK_KAFEIS_MASK,
    ZPMM_DL_MASK_ALL_NIGHT,
    ZPMM_DL_MASK_BUNNY,
    ZPMM_DL_MASK_KEATON,
    ZPMM_DL_MASK_GARO,
    ZPMM_DL_MASK_ROMANI,
    ZPMM_DL_MASK_CIRCUS_LEADER,
    ZPMM_DL_MASK_COUPLE,
    ZPMM_DL_MASK_GREAT_FAIRY,
    ZPMM_DL_MASK_GIBDO,
    ZPMM_DL_MASK_DON_GERO,
    ZPMM_DL_MASK_KAMARO,
    ZPMM_DL_MASK_CAPTAIN,
    ZPMM_DL_MASK_STONE,
    ZPMM_DL_MASK_BREMEN,
    ZPMM_DL_MASK_BLAST,
    ZPMM_DL_MASK_SCENTS,
    ZPMM_DL_MASK_GIANT,
    ZPMM_DL_MASK_DEKU,
    ZPMM_DL_MASK_GORON,
    ZPMM_DL_MASK_ZORA,
    ZPMM_DL_MASK_FIERCE_DEITY,
    ZPMM_DL_MASK_DEKU_SCREAM,
    ZPMM_DL_MASK_GORON_SCREAM,
    ZPMM_DL_MASK_ZORA_SCREAM,
    ZPMM_DL_MASK_FIERCE_DEITY_SCREAM,
    ZPMM_DL_BOOMERANG,
    ZPMM_DL_HAMMER,
    ZPMM_DL_UPGRADE_LFOREARM,
    ZPMM_DL_UPGRADE_LHAND,
    ZPMM_DL_UPGRADE_LFIST,
    ZPMM_DL_UPGRADE_RFOREARM,
    ZPMM_DL_UPGRADE_RHAND,
    ZPMM_DL_UPGRADE_RFIST,
    ZPMM_DL_BOOT_LIRON,
    ZPMM_DL_BOOT_RIRON,
    ZPMM_DL_BOOT_LHOVER,
    ZPMM_DL_BOOT_RHOVER,
    ZPMM_DL_DEKU_GUARD,
    ZPMM_DL_PIPE_MOUTH,
    ZPMM_DL_PIPE_RIGHT,
    ZPMM_DL_PIPE_UP,
    ZPMM_DL_PIPE_DOWN,
    ZPMM_DL_PIPE_LEFT,
    ZPMM_DL_PIPE_A,
    ZPMM_DL_STEM_RIGHT,
    ZPMM_DL_STEM_LEFT,
    ZPMM_DL_PETAL_PARTICLE,
    ZPMM_DL_PETAL_PROPELLER_CLOSED,
    ZPMM_DL_FLOWER_CENTER_CLOSED,
    ZPMM_DL_FLOWER_PROPELLER_OPEN,
    ZPMM_DL_FLOWER_CENTER_OPEN,
    ZPMM_DL_PAD_WOOD,
    ZPMM_DL_PAD_GRASS,
    ZPMM_DL_PAD_OPENING,
    ZPMM_DL_FIRE_PUNCH,
    ZPMM_DL_DRUM_STRAP,
    ZPMM_DL_DRUM_UP,
    ZPMM_DL_DRUM_LEFT,
    ZPMM_DL_DRUM_RIGHT,
    ZPMM_DL_DRUM_DOWN,
    ZPMM_DL_DRUM_A,
    ZPMM_DL_SHIELD_PRONE,
    ZPMM_DL_BODY_SHIELD,
    ZPMM_DL_CURLED,
    ZPMM_DL_SPIKES,
    ZPMM_DL_INIT_FIRE,
    ZPMM_DL_FIRE_ROLL,
    ZPMM_DL_LFIN,
    ZPMM_DL_LFIN_SWIM,
    ZPMM_DL_RFIN,
    ZPMM_DL_RFIN_SWIM,
    ZPMM_DL_FIN_SHIELD,
    ZPMM_DL_MAGIC_BARRIER,
    ZPMM_DL_GUITAR,
    ZPMM_DL_ELEGY_OF_EMPTINESS_STATUE,
    ZPMM_DL_PEDESTAL_SWORD,
    ZPMM_DL_SWORD1,
    ZPMM_DL_SWORD2,
    ZPMM_DL_SWORD3,
    ZPMM_DL_SWORD4,
    ZPMM_DL_SWORD4_BROKEN,
    ZPMM_DL_SWORD1_HILT_BACK,
    ZPMM_DL_SWORD2_HILT_BACK,
    ZPMM_DL_SWORD3_HILT_BACK,
    ZPMM_DL_SWORD4_HILT_BACK,
    ZPMM_DL_SWORD1_SHEATHED,
    ZPMM_DL_SWORD2_SHEATHED,
    ZPMM_DL_SWORD3_SHEATHED,
    ZPMM_DL_SWORD4_SHEATHED,
    ZPMM_DL_SHIELD1_BACK,
    ZPMM_DL_SHIELD2_BACK,
    ZPMM_DL_SHIELD3_BACK,
    ZPMM_DL_SHIELD4_BACK,
    ZPMM_DL_SWORD1_SHIELD1_UNSHEATHED,
    ZPMM_DL_SWORD1_SHIELD2_UNSHEATHED,
    ZPMM_DL_SWORD1_SHIELD3_UNSHEATHED,
    ZPMM_DL_SWORD2_SHIELD1_UNSHEATHED,
    ZPMM_DL_SWORD2_SHIELD2_UNSHEATHED,
    ZPMM_DL_SWORD2_SHIELD3_UNSHEATHED,
    ZPMM_DL_SWORD3_SHIELD1_UNSHEATHED,
    ZPMM_DL_SWORD3_SHIELD2_UNSHEATHED,
    ZPMM_DL_SWORD3_SHIELD3_UNSHEATHED,
    ZPMM_DL_SWORD4_SHIELD1_UNSHEATHED,
    ZPMM_DL_SWORD4_SHIELD2_UNSHEATHED,
    ZPMM_DL_SWORD4_SHIELD3_UNSHEATHED,
    ZPMM_DL_SWORD1_SHIELD1_SHEATH,
    ZPMM_DL_SWORD1_SHIELD2_SHEATH,
    ZPMM_DL_SWORD1_SHIELD3_SHEATH,
    ZPMM_DL_SWORD2_SHIELD1_SHEATH,
    ZPMM_DL_SWORD2_SHIELD2_SHEATH,
    ZPMM_DL_SWORD2_SHIELD3_SHEATH,
    ZPMM_DL_SWORD3_SHIELD1_SHEATH,
    ZPMM_DL_SWORD3_SHIELD2_SHEATH,
    ZPMM_DL_SWORD3_SHIELD3_SHEATH,
    ZPMM_DL_SWORD4_SHIELD1_SHEATH,
    ZPMM_DL_SWORD4_SHIELD2_SHEATH,
    ZPMM_DL_SWORD4_SHIELD3_SHEATH,
    ZPMM_DL_SWORD1_SHIELD1_SHEATHED,
    ZPMM_DL_SWORD1_SHIELD2_SHEATHED,
    ZPMM_DL_SWORD1_SHIELD3_SHEATHED,
    ZPMM_DL_SWORD2_SHIELD1_SHEATHED,
    ZPMM_DL_SWORD2_SHIELD2_SHEATHED,
    ZPMM_DL_SWORD2_SHIELD3_SHEATHED,
    ZPMM_DL_SWORD3_SHIELD1_SHEATHED,
    ZPMM_DL_SWORD3_SHIELD2_SHEATHED,
    ZPMM_DL_SWORD3_SHIELD3_SHEATHED,
    ZPMM_DL_SWORD4_SHIELD1_SHEATHED,
    ZPMM_DL_SWORD4_SHIELD2_SHEATHED,
    ZPMM_DL_SWORD4_SHIELD3_SHEATHED,
    ZPMM_DL_LFIST_SWORD1,
    ZPMM_DL_LFIST_SWORD2,
    ZPMM_DL_LFIST_SWORD3,
    ZPMM_DL_LFIST_SWORD4,
    ZPMM_DL_LFIST_SWORD4_BROKEN,
    ZPMM_DL_RFIST_SHIELD1,
    ZPMM_DL_RFIST_SHIELD2,
    ZPMM_DL_RFIST_SHIELD3,
    ZPMM_DL_SHIELD1_ODD,
    ZPMM_DL_LFIST_HAMMER,
    ZPMM_DL_LFIST_BOOMERANG,
    ZPMM_DL_RFIST_BOW,
    ZPMM_DL_RFIST_SLINGSHOT,
    ZPMM_DL_RFIST_HOOKSHOT,
    ZPMM_DL_RHAND_OCARINA_FAIRY,
    ZPMM_DL_RHAND_OCARINA_TIME,
    ZPMM_DL_LHAND_GUITAR,
    ZPMM_DL_FPS_RHAND_BOW,
    ZPMM_DL_FPS_RHAND_SLINGSHOT,
    ZPMM_DL_FPS_RHAND_HOOKSHOT,
    ZPMM_DL_GORON_ROLL_1,
    ZPMM_DL_GORON_ROLL_2,
    ZPMM_DL_CENTER_FLOWER_PROPELLER_OPEN,
    ZPMM_DL_CENTER_FLOWER_PROPELLER_CLOSED,
    ZPMM_DL_UNK1,
    ZPMM_DL_UNK2,
    ZPMM_DL_UNK3,
    ZPMM_DL_UNK4,
    ZPMM_DL_UNK5,
    ZPMM_DL_UNK6,
    ZPMM_DL_UNK7,
    ZPMM_DL_UNK8,
    ZPMM_DL_UNK9,
    ZPMM_DL_UNK10,
    ZPMM_DL_UNK11,
    ZPMM_DL_UNK12,
    ZPMM_DL_UNK13,
    ZPMM_DL_UNK14,
    ZPMM_DL_UNK15,
    ZPMM_DL_UNK16,
    ZPMM_DL_UNK17,
    ZPMM_DL_UNK18,
    ZPMM_DL_UNK19,
    ZPMM_DL_UNK20,
    ZPMM_DL_UNK21,
    ZPMM_DL_UNK22,
    ZPMM_DL_UNK23,
    ZPMM_DL_UNK24,
    ZPMM_DL_UNK25,
    ZPMM_DL_UNK26,
    ZPMM_DL_UNK27,
    ZPMM_DL_UNK28,
    ZPMM_DL_UNK29,
    ZPMM_DL_UNK30,
    ZPMM_DL_UNK31,
    ZPMM_DL_UNK32,
    ZPMM_DL_UNK33,
    ZPMM_DL_UNK34,
    ZPMM_DL_UNK35,
    ZPMM_DL_UNK36,
    ZPMM_DL_UNK37,
    ZPMM_DL_UNK38,
    ZPMM_DL_UNK39,
    ZPMM_DL_UNK40,
    ZPMM_DL_MAX
} ZPlayerModelManager_DisplayListId;

#define ZPMM_DL_SWORD_KOKIRI_HILT ZPMM_DL_SWORD1_HILT
#define ZPMM_DL_SWORD_KOKIRI_BLADE ZPMM_DL_SWORD1_BLADE
#define ZPMM_DL_SWORD_KOKIRI_SHEATH ZPMM_DL_SWORD1_SHEATH

#define ZPMM_DL_SWORD_RAZOR_HILT ZPMM_DL_SWORD2_HILT
#define ZPMM_DL_SWORD_RAZOR_BLADE ZPMM_DL_SWORD2_BLADE
#define ZPMM_DL_SWORD_RAZOR_SHEATH ZPMM_DL_SWORD2_SHEATH

#define ZPMM_DL_SWORD_GILDED_HILT ZPMM_DL_SWORD3_HILT
#define ZPMM_DL_SWORD_GILDED_BLADE ZPMM_DL_SWORD3_BLADE
#define ZPMM_DL_SWORD_GILDED_SHEATH ZPMM_DL_SWORD3_SHEATH

#define ZPMM_DL_SWORD_GREAT_FAIRY_HILT ZPMM_DL_SWORD4_HILT
#define ZPMM_DL_SWORD_GREAT_FAIRY_BLADE ZPMM_DL_SWORD4_BLADE

#define ZPMM_DL_SWORD_FIERCE_DEITY_HILT ZPMM_DL_SWORD4_HILT
#define ZPMM_DL_SWORD_FIERCE_DEITY_BLADE ZPMM_DL_SWORD4_BLADE

#define ZPMM_DL_SHIELD_DEKU ZPMM_DL_SHIELD1

#define ZPMM_DL_SHIELD_HERO ZPMM_DL_SHIELD2

#define ZPMM_DL_SHIELD_MIRROR ZPMM_DL_SHIELD3
#define ZPMM_DL_SHIELD_MIRROR_RAY ZPMM_DL_SHIELD3_RAY

typedef enum {
    ZPMM_MATRIX_SWORD1_BACK,
    ZPMM_MATRIX_SWORD2_BACK,
    ZPMM_MATRIX_SWORD3_BACK,
    ZPMM_MATRIX_SWORD4_BACK,
    ZPMM_MATRIX_SHIELD1_BACK,
    ZPMM_MATRIX_SHIELD2_BACK,
    ZPMM_MATRIX_SHIELD3_BACK,
    ZPMM_MATRIX_SHIELD1_ODD,
    ZPMM_MATRIX_UNK1,
    ZPMM_MATRIX_UNK2,
    ZPMM_MATRIX_UNK3,
    ZPMM_MATRIX_UNK4,
    ZPMM_MATRIX_UNK5,
    ZPMM_MATRIX_UNK6,
    ZPMM_MATRIX_UNK7,
    ZPMM_MATRIX_UNK8,
    ZPMM_MATRIX_MAX,
} ZPlayerModelManager_MatrixId;

typedef enum {
    ZPMM_MODEL_TYPE_NONE,
    ZPMM_MODEL_TYPE_CHILD,
    ZPMM_MODEL_TYPE_ADULT,
    ZPMM_MODEL_TYPE_DEKU,
    ZPMM_MODEL_TYPE_GORON,
    ZPMM_MODEL_TYPE_ZORA,
    ZPMM_MODEL_TYPE_FIERCE_DEITY
} ZPlayerModelManager_ModelType;

// Registers a new player model and returns a handle to it.
//
// A handle represents an entry in the in-game model manager menu, so hold onto it.
//
// Choose a unique string identifier. It will not show up in the menu if you set a display name, so it need not be human readable.
// There is a maximum length of 255 characters.
//
// Choose a model type from the ZPlayerModelManager_ModelType enum. For now, only ZPMM_MODEL_TYPE_CHILD and ZPMM_MODEL_TYPE_ADULT are supported.
//
// This function can only be used during the ZPlayerModelManager_onRegisterModels event. Otherwise, an invalid handle will be returned.
#define ZPLAYERMODELMANAGER_REGISTER_PLAYER_MODEL(internalName, modelType) ZPlayerModelManager_registerPlayerModel(ZPMM_API_VERSION, id, modelType)
RECOMP_IMPORT(YAZMT_Z64_PLAYER_MODEL_MANAGER_MOD_NAME, ZPlayerModelManagerHandle ZPlayerModelManager_registerPlayerModel(unsigned long apiVersion, char *id, ZPlayerModelManager_ModelType modelType));

// Sets the name that will appear in the menu for the passed in model handle.
//
// Limited to 64 characters.
RECOMP_IMPORT(YAZMT_Z64_PLAYER_MODEL_MANAGER_MOD_NAME, bool ZPlayerModelManager_setDisplayName(ZPlayerModelManagerHandle h, char *displayName));

// Sets the name that will appear in the author field of the menu.
//
// Limited to 128 characters.
RECOMP_IMPORT(YAZMT_Z64_PLAYER_MODEL_MANAGER_MOD_NAME, bool ZPlayerModelManager_setAuthor(ZPlayerModelManagerHandle h, char *author));

// 
RECOMP_IMPORT(YAZMT_Z64_PLAYER_MODEL_MANAGER_MOD_NAME, bool ZPlayerModelManager_setDL(ZPlayerModelManagerHandle h, ZPlayerModelManager_DisplayListId dlId, Gfx *dl));

RECOMP_IMPORT(YAZMT_Z64_PLAYER_MODEL_MANAGER_MOD_NAME, bool ZPlayerModelManager_setMtx(ZPlayerModelManagerHandle h, ZPlayerModelManager_MatrixId mtxId, Mtx *matrix));

RECOMP_IMPORT(YAZMT_Z64_PLAYER_MODEL_MANAGER_MOD_NAME, bool ZPlayerModelManager_setLoadCallback(ZPlayerModelManagerHandle h, void (*onModelLoad)(void *), void *userdata));

RECOMP_IMPORT(YAZMT_Z64_PLAYER_MODEL_MANAGER_MOD_NAME, bool ZPlayerModelManager_setUnloadCallback(ZPlayerModelManagerHandle h, void (*onModelUnload)(void *), void *userdata));

RECOMP_IMPORT(YAZMT_Z64_PLAYER_MODEL_MANAGER_MOD_NAME, bool ZPlayerModelManager_setSkeleton(ZPlayerModelManagerHandle h, FlexSkeletonHeader *skel));

RECOMP_IMPORT(YAZMT_Z64_PLAYER_MODEL_MANAGER_MOD_NAME, bool ZPlayerModelManager_setEyesTextures(ZPlayerModelManagerHandle h, TexturePtr eyesTextures[PLAYER_EYES_MAX]));

RECOMP_IMPORT(YAZMT_Z64_PLAYER_MODEL_MANAGER_MOD_NAME, bool ZPlayerModelManager_setMouthTextures(ZPlayerModelManagerHandle h, TexturePtr mouthTextures[PLAYER_MOUTH_MAX]));

RECOMP_IMPORT(YAZMT_Z64_PLAYER_MODEL_MANAGER_MOD_NAME, Gfx *ZPlayerModelManager_getDL(unsigned long apiVersion, PlayerTransformation form, ZPlayerModelManager_DisplayListId dl));

#define ZPLAYERMODELMANAGER_GET_FORM_DISPLAY_LIST(form, displayListId) ZPlayerModelManager_getDL(ZPMM_API_VERSION, form, displayListId)

#define ZPLAYERMODELMANAGER_CALLBACK_REGISTER_MODELS RECOMP_CALLBACK(YAZMT_Z64_PLAYER_MODEL_MANAGER_MOD_NAME, ZPlayerModelManager_onRegisterModels)

#endif
